t (10/5/20)

+ note (what is this? the journey of revival of the listen to ruby project)

+ note (what has been done before this entry)
    + done (thought about the feasibility of this, resulting in scraping the original idea and went to another idea: a potion cafe)
        + note (reason: too story based, can't think of easy to implement fun gameplay)
        + note (reason: 2, potion mixing could be fun, taking gameplay from minecraft crafting, diner dash, and many more; more references for ideas so it is better. easy(..er?) to implement even)
        + note (reason: 3, a lot of emerging ideas that can come up in the gameplay that we imagine)
            + TODO (flesh out these ideas below)
                + note (idea: the quintuplet witches, the brawlers, and the potion of truth)
                + note (idea: the playful brats and the paralysis potion)
                + note (idea: the lovestruck and the love potion)
                + note (idea: the magical signature of the potions)
                + note (idea: the broken soldiers and the stabilizing potion)
                + note (idea: the healing potion and the time control potion)
                    + note (...that will do for now)
    + done (tried out Godot)
        + note (learnt that godot is read as godot(https://www.youtube.com/watch?v=f6RiWi32oO0&t=407s))
            + note (as well trying some parts from that HeartBeast's tutorial)
    + done (make some game mockup)
        + note (using some free assets such as King and Pigs (https://pixel-frog.itch.io/kings-and-pigs))
    + done (tried out deploying to Android and met success)

+ note (what's next)
    + TODO (make the simple healing potion giving mechanic to roaming dying character on screen)
        + TODO (try to make the minecraft-like 9x9 crafting for potion making)
    + TODO (design the object arrangement)

o ref(10)
    + note (idea: ...the fight unfolding in the corridor)

o ref(5) (forgot something)
    + done (basic asset to arrange and initial scripting)
    + done (dealing with TileMap and made a moving character following TileMap neatly)

+ note (for today)
    + done (make continuously decreasing health label, dying, and button to make it survive)
        + question ( how do we arrange the nodes so script call and animationis not troublesome?)
            + problem ( the animation is messy when new label was attached)
        + question ( signal or direct call?)
        + note (a lesson on: only one script for one node)
        + TODO (ARRANGE THE FILES and ASSETS!)
    + done (init version control w/ git, of course)

t (11/5/20)
+ done (make a character spawner and button to randomly save the spawned)
    + note (a lesson on how to connect the signal from the spawned)
    + problem ( how to keep track the spawned objects and access them)
        + solution( using dict and object.get_instance_id() as keys)
    + note (a lesson on signal; connect, passing values)

+ TODO (find out how to select a random starting position for the spawned character)

+ note (currently we make it as we think it, no regards of code neatness for now)

t (12/5/20)
+ TODO (make the characters clickable and respond with something)
    + done (not so hard using signals and the already built character tracker from ref(50))

+ TODO (slow down the pace of everything, health decreasing, movement, etc...)
+ TODO (actions give the character potion)

o ref(53, 61)
    + done (does not change much actually)
        + note (random position is helped by the method `TileMap.map_to_world`)
            + problem ( Tiling position is still incorrect(offset to the side))
                + TODO (fix above)
        + note (the pacing is done by tweaking numbers)
            + TODO (make the pacing controlled in a neat fashion, in one place or something)

+ note (for now, let's redesign what we wanna make for the first prototype)

t (13/5/20)
+ note (idea: growing from ref(15))
    + note (simple gameplay loop: come the broken soldiers -> give stabilizing potion -> make healing potion -> give them)
        + note (more detail on paper)
    + note (idea: using pattern as mechanic, those pattern that usually used in phone locks)
        + TODO (make the pattern system)
    + note (we are actually confused where to start now hmm)

+ TODO (design assets for potion-related stuffs)

t (14/5/20)
+ note (a lesson on the GDscript code convention: https://docs.godotengine.org/en/stable/getting_started/scripting/gdscript/gdscript_styleguide.html)

+ done (early pattern system, flexible points, only make the point colored as selected so far)
    + note (a lesson on InputEventScreenDrag, thanks to this guy: https://godotengine.org/qa/30933/differentiate-inputeventscreentouch-inputeventscreendrag)
    + problem ( if touch is released outside the collision area, it doesn't register as screendrag end)

+ done (more on the pattern system, now features line drawing and close to the real one)
    + note (a lesson on event.position, learning that the value is weird, will be correct if it is minus self.position(the position of the event listener))
    + question ( is our implementation a neat one for detecting ScreenDrag's end?)
        + note (our assumption is that the ScreenDrag end when the last event received is a ScreenTouch event type instead)

t (15/5/20)
+ note (somehow this gives me inspiration that I can't grasp quite yet: https://www.youtube.com/watch?v=PbJaOaXthhk)

o ref(79)
    + done
        + TODO (extend pattern system to potion making system)
            + note (idea: time-sensitive pattern)
        + TODO (timer system so we can set the game pacing)

+ note (okay, something breaks while we are making the "Cauldron")
    + note (the break is literally everything broken!)
        + note (we found a way to see error directly from android: check the option "Debug > Deploy with Remote Debug")
        + note (the error that appears)
            + note ("load_source_code condition err is true returned: err)
            + note (something along the lines of "from signal 'input_event', 'this_method' not found")
                + note (even though there is no problem with the connection, checking via inspector)
    + note (Cauldron refers to ref(101))
    + note (we haven't found what causes it!!)
        + note (what we suspect is the one that is causing this error:  "Another resource is loaded from path 'res://scenes/Point.gd' (possible cyclic resource inclusion).")
            + note (possibly because we are moving resource between folder which seems now a bad idea, we aren't yet sure)

    + note (solution, discard everything :()
        + note (so glad we git)

o ref(105)
    + note (it turns out, the cause is because I reparent the nodes into another node to group it)
        + note (a lesson on that Node.get_children() only return direct children)
        + note (the error seems cascase to another signal apparently?)
        + solution( use 'Group' and get all node from group instead reading from children)
            + note (remember that we refer it to string so changing group's name needs caution)

+ problem ( somehow a value won't pass using signal from these two scene)
    + note (suspect, value can't be passed between instanced scenes?)

t (16/5/20)
o ref(127)
    + note (solution, it's because you forgot the keyword 'return' in one of the passing method.... :/)
        + note (daaaaang it how did I even miss that, I spent like 6 hours!)

o ref(123)
    + note (the error appears yet again, but this time we fixed it by below)
        + solution( detach script > move scripts > reattach scripts)
            + note (don't know why it works, but it works!)

+ done (add neat gem system in Cauldron, visual only so far)
    + note (a lesson on function override and call base func by prepending a dot)
    + note (a lesson on making a mathematical formlula on a position series that is different for odd number of elements and even number of elements)
        + note ((x + 2m) * (i + 0.5))

t (17/5/20)
+ done (added a sweet tweening when a gem is added)
    + note (a lesson on being careful when changing method names, you have to expect it to be broken)
    + TODO (our code is messy, clean it up following gdscript styles ref(85))

+ done (separate the node to process each gem process in the cauldron)
    + note (a lesson on duplicate(7) and dictionary.duplicate(true))
        + problem ( no1, we want to "send" a dictionary to another node using duplicate but it is still the same dictionary. so when we process it in one node, the dict in another node is also affected)
            + problem ( while fixing this, it was revealed that ref(94) is flawed)
                o ref(94) + null
                + solution( new assumption, it ends when the event is InputEventScreenTouch and prev event is InputEventScreenDrag)
            + solution( make a Helper function that duplicate dictionary with duplicate(7) for every element)
        + note (this is acutally a messy solution, we should've had separation between data aspect and visual aspect, the thing that mvc preach about, something like that)
            + TODO (design the separation of data)
            + problem ( this one causes another node would likely to break if interrupted in the process)
                + note (example: the "Reactor" node, the one that receive the result of pattern mixing, will break if the mixing part is done quickly and reactor's process longer than the mixing part)
                + note (temp,solution: make reactor's process instanst for now(only deleting child))
                + TODO (design the action flow and stuff so the process order and interruption is clear)

t (18/5/20)
o ref(105,109,110,120)
    + note (reason: these errors, especially ref(109) and ref(110) are apparently caused by the modification of our code, any code after deploy)
        + note (it seems the remote debug system needs the code to be the same as what is deployed)
            + note (so if you deploy to android, and then change the code a bit and save it, it will break things in the deployed app)
                + note (the most apparent break is that all signal lost their connection, hence ref(110))

t (19/5/20)
+ note (currently designing first before dive further)
    + note (designing includes building prototype assets)
        + TODO (reassemble everything to fit the more robust design)
    + note (need to learn the control node and how it behaves)
        + question ( do pattern points fit more if we use control node?)

+ problem ( a little visual bug, if we end pattern before animation finished, the animation will stop)

t (22/5/20)
+ note (back after designing stuff)
    + note (initially we want pixel stuff, but both miracle merchant and helltaker opened my eyes and now we changed artyle directions!)
        + note (plus more simplistic, linear play to aim first)
        + note (and we made the mock(v3 now and it looks gooood!))

+ done (reassemble everything with new art with pattern system already setup)

t (23/5/20)
+ note (this is eye opening: https://www.youtube.com/watch?v=T5f7YZE8e38)

+ TODO (learn to make things cool visually)
    + note (probably learning shader is the way)
    + note (we are following one the three key of fun stated here: https://www.youtube.com/watch?v=7L1B5YaxxoA)
        + note (and that is the 'fantasy', we will make something that has strong story impression and we already have that vision)

+ TODO (a small one, capture the pattern and make it receive 5 patterns maximum)

+ note ( a lesson on godot's project organization: https://docs.godotengine.org/en/stable/getting_started/workflow/project_setup/project_organization.html)
    + note ("make things as close to the scene as possible")
        + note (this is why new scripts is automatically store near the scene file when created)

+ note ( interesting read: http://gameprogrammingpatterns.com , I just read the command section for now)

+ done (reorganization following ref(198))

+ done (making the "RuneDrawer")
    + note (a lesson on using key to iterate dictionary)
    + note (wow....we managed to abstractify the Centerizer's code, for determining new location based on integer row and column numbering)
    + question (is there a better way to encapsulate the pattern? pattern data is currently defined inside the Pattern node scripts, using arrays and dictionary)

+ note (a lesson on changing the inspector value in-editor while remote debug deploy, you can do that apprently, neat)

+ note (well, shader is reall interesting)
    + note (I started from here: https://docs.godotengine.org/en/3.1/tutorials/shading/your_first_shader/index.html)
        + note (and then here: https://thebookofshaders.com)
            + note (and holy the possibilities are endless, now the problem is to grasp all these "fences" first)

+ note (with this shader learning going on, our iteration to this game will be this)
    + note (the steps are below)
        + note (step 1, implement the core gameplay mechanic little by little, decouple visual and mechanic parts!)
        + note (step 2, 'reify' your vision more, draw the next vision, pour it all on the paper)
        + note (step 3, learn and experiment the shader)
    + note (for now the todos are below)
        + TODO (make the "pattern gauntlet", give patterns to follow and rate the accuracy)
        + TODO (plan the asset more for the "intro")

o ref(209)
    + meta (interesting, we unknowingly use 'question' as a tag, might as well use it for everywhere else)
        + meta (change every note-question to question tag)

t (25/5/20)
+ done (add rune generation, we call what's generated a runeset)
    + note (oh boi I thought this would be simple but no)
        o ref(209)
            + note (we keep using dictionary as a pattern data strucure, seems pretty straightforward and become offcode convention)
        + note (we use the animationless 'Centerizer' from prev ruby)
            + question (how to make it extensible to animate later?)
            + question (how to properly control animation and input happenings? don't want them to clash and break)

+ meta (change note:problem, note:solution, mote meta now to follow ref(229))

+ done (make the pattern react or "answer" the rune set, the first loop of gameplay is here)
    + note (not much feedback and the "feel", and this is the challenge)
        + note (actually some pattern is really hard to follow)
    + note (which mean)
        o ref(224)
            + note (the accuracy is set aside later, we're focusing to snappy feedback first and cool look)

+ TODO (how to make it look cool)
    + TODO (deal with animation needs as ref(237) mentioned)

t (27/5/20)
+ problem (playtesting shows the rune drawn still unclear which point is the start and which order)
    + note (also it is still kinda needlessly complex)
    + note (the rune also kinda not good looking if it only half sized)
        + question (maybe preset runes would be better?)

o ref(224)
    + done (at ref(246), we forgot to add done)

+ note (a lesson on yield, AnimationPlayer, and Tween)
    + note (we also brought back Centerizer's tween animation)

+ note (cuurently doing an animated loop of the gameplay)
    + note (currently ther is a buggy order of animations callback)

t(28/5/20)
+ done (an animated gameplay loop, this is an attempt to understand the animation)
    + note (mostly a lesson on yielding and animation order)
    + note (the bug from ref(265) is caused by incorrectly deleting dictionary while iterating)
        + solution (duplicate the dictionary first and then iterate with the duplicate one to erase the original)

+ note (we decrease the number of point in a line)
    + note (somehow our random pattern generator often create pattern only the top 6 points on the 3x3 points pattern)

t (31/5/20)
+ note (we are away from pc to do some art and boy is art so hard)
    + note (we were doing things wrong, based on here: https://www.youtube.com/watch?v=sc3h5JXtIzw)

+ note (my god we've been stuck for the past three days)
    + note (the key! is to make complex information presented in a simple way)
        + note (...which is not simple at all, *sigh...)

t (1/6/20)
+ done (the art is done! it looks good! following AT/miracle merchant style)
    + note (the asset for now is for pattern puzzle only)
        + TODO (build the "RunePlate")
    
+ note (oh yeah, one more thing, we have milestone to reach)
    + TODO (finish a good looking prototype to submit to Jonas Tyroller's event of him checking out indie submissions!)
        + note (deadline June 7th 2020!)
        + note (link: Jonas Tyroller ytcommunity tab: https://www.youtube.com/channel/UC_p_9arduPuxM8DHTGIuSOg/community)

+ note (eyeopening and lifesaving: https://www.youtube.com/watch?v=fpUchzKtDbQ)
    + done (reorganizing project files and incorporating new assets as well)
        + TODO (finish RunePlate and complete the Gauntlet loop)

+ problem (the pattern randomizer is not actually random from 1 to 9 order)
    + TODO (fix this)

+ note (a lesson on global var using singletons: https://docs.godotengine.org/en/stable/getting_started/step_by_step/singletons_autoload.html)

o ref(299)
    + done (simple)

+ done (initial "RunePlate")
    + problem (syncing Line2D's points position to position from Control nodes is confusing)
        + solution (make sure the Line2D own position is synced to the parent of the control nodes it refer)

t (2/6/20)
+ done (RunePlate generation loop)
    + note (a lesson on Godot's group that it refers to all nodes in the scene that is in the group rather only the child of a certain nodes)
        + problem (was, the RunePlate need to get all gem child belongs in the group, but using just get_tree().get_nodes_in_group() will return all gems in the scene, which some are belong to another RunePlate)
            + solution (just give em a check with self.is_parent_of(gem))

+ done (Pattern point equality, it will accept patterns that has the same points regardless of pattern shape)
    + note (a lesson on comparing dictionaries and hash values, don't dorget that)
    + note (we are getting used to using breakpoints now yea! goodbye print_debug!)
    + done (we are now using Global.pattern_dimension and removing dimension input in PatternHelper's func)
        + note (we are now moving forward with assumption that all pattern will have the same dimension which is 3x3)

+ note (we are now dealing with VFX!)
    + done (trying grayscale shader and using it for gems vfx)

t (3/6/20)
+ done (Centerizer and RunePlater)
    + note (we are working on animating the loop)
    + problem (animation timing is still wonky and there is some inconsistent centerizing animation)
        + question (we are relying on yield so animation can be ordered, is this good?)
            + note (we have both script animation and AnimationPlayer's animation and they need to do things hand in hand)
    + problem (another that we encountered, was that we tried to make centerizer for control nodes, but given control does not have centered position, things we made are wonky)
        + note (we need control since RunePlate is a control node)
        + solution (we change RunePlate to Node2D while having Control nodes as children)

+ done (more animation fixes and looping)
    + note (a lesson on using Dictionary.values() to iterate values instead of taking keys and using the keys like we do in ref(207))

t (4/6/20)
+ done (inserting new animation inbetween RunePlate execution)
    + note (a lesson on calling parameterless `yield()` to make sure the whole function can be come 'yield'able)
    + note (was also trying out particles but problem arise)
        + problem (initially wanted particle to appear as runeplate animated into a smaller object. however, since we put particle as the child, the particle gets smaller as well)

+ done (making new asset and entering the dialogues zone)
    + note (a lesson on not being stuck up on doing things we can't do)
    + note (this was helpful: https://www.youtube.com/watch?v=kkLqW8WhCgg)
        + problem (we wanted the text to align center vertically, but it does not do that)

+ note (we found cool shader to shift hues: https://gist.github.com/mairod/a75e7b44f68110e1576d77419d608786)
    + note (thank you shader gurus)

+ done (asset for potion, trying hueshader, and attempting to animate dynamic instances)
    + note (a lesson on using .tres instead of .material since .material become a binary file, stinky)
    + problem (We have trouble animating Centerizer, and animating instanced scenes from "outside" in general)

t (5/6/20)
+ done (add potion animation for results and indicator of invidual runeplates results)
    + problem (there was a problem with yield and tween in Centerizer code, somehow everything just doesn't continue without any error, it's as if it's waiting for something indefinitely)
        + note (the yield was in a for loop but the for loop only loop once and it just stop, doesn't touch any more breakpoints inside, or anywhere else, and it doesn't continue to what's after the loop as well! very weird...)
        + note (suspect is one yield we use to wait tween_all_completed never get the signal)
        + solution (not yielding to tween but to good ol timer)

t (6/6/20)
+ note (dawn of the second day)

+ done (the storyboarder, dialogues, and stories represented in json, plus a potion request!)
    + note (the json syntax looks fine *chefkiss* however the interpreter still *vomit*)
        + note (it's as if we could forget it just like that if we didn't think of it for more than a day)
            + TODO (somehow represent that system in a paper or a more real way, to reify?)
        + note (we also plan for dynamic classic dialogue response list that can be configured via json)
            + TODO (the dialogue response request)

+ meta (we kinda rarely set up TODOs and just put some 'done' that we can put out)
    + meta (well deadline is close ref(291))

o ref(271)
    + done (dynamic actions completed!)
        + note (and we decided to name it "actions" instead of "response")
        + note (I think the "interpreter" is wrapped up kinda nicely now)

+ note (we now combine all the color manipulation shader into one)
    + note (and we make different material that use the same shader)
        + note (by different I mean the unsaved material that you select in material dropdown `New ShaderMaterial`)
        + note (this is, however, what we truly want: https://godotengine.org/article/godot-40-gets-global-and-instance-shader-uniforms)
            + note (kinda coincidental)

+ note (we now use the datatype BitMap from godot, it's a binary value matrix for use comparing pattern)
    + note (sad there is no simple matrix operation in godot)
        + note (relevant: https://github.com/godotengine/godot/issues/26793)
            + note (I am here is another use case)
            + problem (found already, all the runeplate shares same material since it's instanced from the same class)
                + solution (using material duplicate on ready, answer from: https://godotengine.org/qa/2866/how-do-i-make-material-shader-instances-2d)

+ done (the negative runeplate and shader journey for UI)

t (7/7/20)
+ note (dawn of the final day)

+ done (potion mix system!, 4 potion visuals: healing, shock, paralysis, damage)
    + note (apparently error in static func/singletons/autoload is silent errors)
        + note (silent error means the error doesn't tell you where it's from, it just showed that autoload failed to load)
    + problem (breakpoints in either singletons or static function somehow doesn't work)
        + solution (move it to normal scripts in a normal node for now)
    + problem (weird bug, if we click to fast somehow everything just stop without error when giving response/action to dialogues)

+ note (a lesson on making sure whether you are using dictionaries or arrays while looping something)

+ problem (potentially, currently we pass the potion node instead of just potion info to Cafe/storyboarder system, so just remember to queue_free() that potion)

o ref(404)
    + done (fixed this)
        + note (reason: we were unclear to set when the input is enabled and when is not)
            + note (only enable input to Cafe system for dialog only 'line's, when potion,action, animation, or anythinge else really, is asked, input disabled)

+ done (animation integrated to Cafe!! add some Sienna animation)
    + problem (might arise if anim and dialog is present together. beware)
    + note (Sienna is the intro character's name btw)

+ done (FIRST DEMO YAYA!)
    + note (this is for u Jonas Tyroller, I mean that ref(290))
    + note (wow the system I made is robust wow wow even I impressed myself)
        + note (some key takeawat when making story in a Cafe system)
            + problem (might arise when story get too complex, I have to make sure every "Verse" jump is written in correct string and connect to an existing verse)
                + TODO (make, and firstly find out how to make tool script for this)
            + problem (sometimes I need the same verse with different state of story)
                + note (use case! sienna is explaining all sorts of potion, the dialog is the same but with different potion in mind)
                + TODO (build a variable system)
            + problem (sometimes I need a "Line" to automatically go to some other verse and line)
                + solution (add "next" keyword, like action but no selecting action)
                    + meta (I am writing all of this without thinking whether it could be understood by others, mind you)
                        + meta (however, future me, please still understand)
    + note (tested in a non 16:9 screen, so it doesn't stretch out but gives blacks screen)
        + note (that's good by not elegant)
            + note (上品じゃない！)

t (8/7/20)
+ note (milestone is a delicate period, feels like we easily lose our momentum the moment we lose our grip)
    + note (kinda not a good mindset as well but eh)
    + TODO (we need to do the TODO sweep)

+ note (this could help ref(424): https://code.visualstudio.com/docs/languages/json, JSON schema part)

o ref(429)
    + done (add `next` keyword! this one make every jump in the storyboard an `action`)
        + note (this one saves space and reduce duplication)
        + note (assumption: we now unable to jump to new verse on line other than ZERO)

o ref(425)
    + done (partially)
        + problem (we need to dynamically change the verse but we access it without copying them, so modification can only be done once)
            + note (like the first potion name printed will be the printed for the rest of the game)
        + TODO (rework and rethink how we store the data at runtime)

t (9/7/20)
o ref(452)
    + done (make the cafe store the 'verse' dictionary data instead of just the key)
        + note (a lesson on dictionary.duplicate() if you want to get a modifible value from on dictionary, or the original will be modified too)

+ note (TODO sweep)
     o ref(10)
        + null (most of those ideas scrapped in the wake of concept change)
            + note (we go from potion shop to a small journey)
                + note (and the demo we are aiming in short time is even smaller)
    o ref(26)
        + DONE (with our current pattern making system, the roaming dying character part is scrapped tho)
            + note (the potions that we make would be similar to options in a choose your adventure game or the like)
    o ref(27,28)
        + null (scrapped the minecraft-like crafting, wasn't sure what I meant with object arrangement tho)
    o ref(43)
        + done (following ref(198))
    o ref(53)
        + done (by ref(64))
            + null (but it's scrapped tho)
    o ref(58,61,62,68,70)
        + null (scrapped)
    o ref(79)
        + done (behold, our main concept)
    o ref(82,101)
        + done (part of making the main concept, it is done by a 'done' tag somewhere, lazy to search it up)
            + meta (a TODO as well, find out how to make a script that can work on VSCode to help us infer this .adventure file)
                + meta (it is also relevant to ref(424), another alternative for act.json inference)
    o ref(103)
        + null (scrapped, since this become a dialogue based game instead)
            + note (maybe can be reconsidered later)
    o ref(148)
        + done (for the most part and all the new scripts we make)
    o ref(158)
        + done (I think we don't really esclusively deal with this problem, it is solved as we grow the system)
            + done (the Cafe system is the pinnacle of this)
    o ref(162)
        + done (with Cafe system, this all good)
    o ref(174)
        + null (not sure what I meant by "the more robust design" lol)
    o ref(191)
        + TODO (one of our next target by learning shader)
    o ref(196)
        + null (wait what was this?)
            + note (ref(431))
    o ref(224,225)
        + done (this is the current one, the accuracy part is scrapped tho)
    o ref(249)
        + TODO (same with ref(494))
    o ref(250)
        + problem (Centerizer is still our main problem, making it easy to animate while keeping it programatically not broken)
    o ref(287)
        + done (simply what is now)
    o ref(290)
        + done (our calling and we made it through)
    o ref(296)
        + done (not much to say)
    o ref(299)
        + done (by ref(304))
            + meta (if we have ref(480), we shouldn't deal with done TODOs)
    o ref(369)
        + null (for now it's kinda a troublesome overhead to spent time on, we build the system along the way)
    o ref(371)
        + done (Cafe system is the realization of this)
    o ref(424)
        + TODO (a helper script for Cafe system we need)
    o ref(427)
        + done (partially, only for potions data for now)
            + TODO (enrich the variable system of Cafe)
    o ref(439)
        + done (yo)
    o ref(452)
        + done (partially by ref(452), currently we don't need fancy data transfer between line in Cafe system, only for potions)

+ note (new milestone, before the unknown Jonas Tyroller video publication)
    + note (target is that we make a cool looking demo, however, we have a lot of ideas and we need to be selective which to do first)
        + note (here are the list that we want to achieve)
            + TODO (learn shader, fix animation, make it have cool visual movement and effect)
            + TODO (write the small story of intro with Sienna, that new Character that we already think of, and the "Battle")
            + TODO (draw finished looking asset and work on the UX again)
            + TODO (devlog with both english and japanese, so continue learning japanese with this aim and prep how we devlog)
            + note (programming goal and problems)
                + TODO (Cafe: interpret the 'verse' tag, so a verse can include another verse inside)
                + TODO (Cafe: make the helper, ref(519))
                + TODO (Centerizer: fix this mess)
            + note (to market this, and find ... uh playerbase?)
                + note (actually the scariest and most unpredictable part)

+ note (from above, we lean to do ref(533), "finish" the asset first)

t (10/6/20)
+ note (art is hard!)
    + note (we are still trying to 'reify' our vision with what happen in battles and how the UX will look)

+ done (trying out Json schemas to help us build act.json)
    + problem (we need to check that a certain property values exist as a key in another object, but still can't find out whether it is possible or not)

t (11/6/20)
+ note (art is indeed hard, story is hard, making connected gameplay as well)

o ref(530)
    + note (all these TODOs yet we forgot that the important one isn't finished yet)
        + TODO (make a complete potion system!)
            + note (what we need to complete is what kind of potion and give "story" elements to the runes)
                + note (this is what we've been doing for the day)
            + note (and then the ux for this main mechanic, including animation)
            + note (we've been also trying to come up with a battle system that can be complemented with potion system we have or we will make)
                + note (our 'wants' for the battle is the one that can have emergent events but it seems what we are thinking is big in scale and potentially exponential in resource needed)
                + note (we are also thinking how we represent the battle and how the potion will affect the course of battle in a representation akin to what we make in cafe system, more variables and stuff)

t (16/6/20)
+ (art is hard: https://www.youtube.com/watch?v=a71rha3140k)
    + note (ok we've been radio silent here for a couple of days and I dislike it, there are several talking points that I want to make)
        + note (we did have progress actually in the past couple days but there were things that holds us back to document those progress)
            + note (firstly, we list what we did)
                + done (the small branching story that is ready be implemented)
                + done (hagumaja design)
                + done (ruby's potion shop design)
                + done (the asset that looks good that is just recently done today)
            + note (secondly, the things that hold us back to document them)
                + problem (in art, we always feel like lacking and there is this constant feeling that things we did in art isn't worth recording unless it's finished)
                + problem (two, the feeling that we might "fail" to make what we want)
                + problem (also we are having a hard time to modularize the process we make in art)
                    + solution (to all three of that, is, eh, none so far. we just brute force our way so we don't encounter them. meaning, we will document everything)
        + note (another thing we notices in our art progress)
            + note (currently we are bad at coloring but decent at lineart and designing stuff, confident about this one)
                + note (however, linart part is when we do it physically, pencil, pens and stuff)
                    + note (in digital, we don't have the same confidence)
                        + note (it's always hard to get the right line stroke in the first try)
                + note (there is this one time when we are stuck at coloring the asset, but it turns out we were never satisfied because the lineart was suck so the color looked suck as well)
                    + note (this means when coloring, we need to make the lineart atleast somewhat acceptable first)
        + note (currently we are drawing inspiration from neytirix, ghostshrimp, and dedouze)
            + note (neytirix's cat adventure art gives us inspiration of the atmosphere and the look)
            + note (ghostshrimp's art the quality that we want to emulate, extension from the art from miracle merchant)
            + note (dedouze is the 3d inspiration that we think could improve the ghostshrimp's style)
                + note (about this, seeing dedouze's art inspired us so much that we almost jump to blender learning but we hold it back because we have an MVP to reach)
                    + note (MVP: minimum viable product, advice from Jonas: https://www.youtube.com/watch?v=3Kzu5FdplV0)
    + note (tldr: document everything, dont be distracted, finish the game)

+ TODO (integrate the asset done and prepare for the story integration)

t (17/6/20)
+ note (thanks toby fox: https://www.youtube.com/watch?v=E5XXbd5NvuQ)
    + note (another inspiration, the feel that we want to emulate, at least bits of it: https://twitter.com/_IF0_/status/1272218983043788800)

o ref(593)
    + done (integrating ruby v4 assets)
        + note (there are things that we tried to add and found some problems and lessons instead)
            + problem (we wanted to make a autosize dialogue box but it turns out RichTextLabel that we use does not have autowrap or someting like that)
                + solution (for now, we now set it to fixed size box and modify the text amount accordingly for each line)
            + note (a lesson on theme where it needs to be assigned to a control parent)
                + problem (our control is kinda spread out so theme is assigned to multiple control that have control children)
            + note (a lesson on not getting stuck trying the same things and always try to find workaround fast so you don't feel down)

t (28/6/20)
+ note (we're back!)
    + note (this time, the silence was because we caught a pretty bad cold, evertyhing went halted for a week)

+ done (preparation for the story integration)
    + done (resizable action buttons)
        + note (more info tomorrow since we're already tired)
