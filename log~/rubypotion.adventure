t (10/5/20)

+ note (what is this? the journey of revival of the listen to ruby project)

+ note (what has been done before this entry)
    + done (thought about the feasibility of this, resulting in scraping the original idea and went to another idea: a potion cafe)
        + note (reason: too story based, can't think of easy to implement fun gameplay)
        + note (reason: 2, potion mixing could be fun, taking gameplay from minecraft crafting, diner dash, and many more; more references for ideas so it is better. easy(..er?) to implement even)
        + note (reason: 3, a lot of emerging ideas that can come up in the gameplay that we imagine)
            + TODO (flesh out these ideas below)
                + note (idea: the quintuplet witches, the brawlers, and the potion of truth)
                + note (idea: the playful brats and the paralysis potion)
                + note (idea: the lovestruck and the love potion)
                + note (idea: the magical signature of the potions)
                + note (idea: the broken soldiers and the stabilizing potion)
                + note (idea: the healing potion and the time control potion)
                    + note (...that will do for now)
    + done (tried out Godot)
        + note (learnt that godot is read as godot(https://www.youtube.com/watch?v=f6RiWi32oO0&t=407s))
            + note (as well trying some parts from that HeartBeast's tutorial)
    + done (make some game mockup)
        + note (using some free assets such as King and Pigs (https://pixel-frog.itch.io/kings-and-pigs))
    + done (tried out deploying to Android and met success)

+ note (what's next)
    + TODO (make the simple healing potion giving mechanic to roaming dying character on screen)
        + TODO (try to make the minecraft-like 9x9 crafting for potion making)
    + TODO (design the object arrangement)

o ref(10)
    + note (idea: ...the fight unfolding in the corridor)

o ref(5) (forgot something)
    + done (basic asset to arrange and initial scripting)
    + done (dealing with TileMap and made a moving character following TileMap neatly)

+ note (for today)
    + done (make continuously decreasing health label, dying, and button to make it survive)
        + note (question: how do we arrange the nodes so script call and animationis not troublesome?)
            + note (problem: the animation is messy when new label was attached)
        + note (question: signal or direct call?)
        + note (a lesson on: only one script for one node)
        + TODO (ARRANGE THE FILES and ASSETS!)
    + done (init version control w/ git, of course)

t (11/5/20)
+ done (make a character spawner and button to randomly save the spawned)
    + note (a lesson on how to connect the signal from the spawned)
    + note (problem: how to keep track the spawned objects and access them)
        + note (solution: using dict and object.get_instance_id() as keys)
    + note (a lesson on signal; connect, passing values)

+ TODO (find out how to select a random starting position for the spawned character)

+ note (currently we make it as we think it, no regards of code neatness for now)

t (12/5/20)
+ TODO (make the characters clickable and respond with something)
    + done (not so hard using signals and the already built character tracker from ref(50))

+ TODO (slow down the pace of everything, health decreasing, movement, etc...)
+ TODO (actions give the character potion)

o ref(53, 61)
    + done (does not change much actually)
        + note (random position is helped by the method `TileMap.map_to_world`)
            + note (problem: Tiling position is still incorrect(offset to the side))
                + TODO (fix above)
        + note (the pacing is done by tweaking numbers)
            + TODO (make the pacing controlled in a neat fashion, in one place or something)

+ note (for now, let's redesign what we wanna make for the first prototype)

t (13/5/20)
+ note (idea: growing from ref(15))
    + note (simple gameplay loop: come the broken soldiers -> give stabilizing potion -> make healing potion -> give them)
        + note (more detail on paper)
    + note (idea: using pattern as mechanic, those pattern that usually used in phone locks)
        + TODO (make the pattern system)
    + note (we are actually confused where to start now hmm)

+ TODO (design assets for potion-related stuffs)

t (14/5/20)
+ note (a lesson on the GDscript code convention: https://docs.godotengine.org/en/stable/getting_started/scripting/gdscript/gdscript_styleguide.html)

+ done (early pattern system, flexible points, only make the point colored as selected so far)
    + note (a lesson on InputEventScreenDrag, thanks to this guy: https://godotengine.org/qa/30933/differentiate-inputeventscreentouch-inputeventscreendrag)
    + note (problem: if touch is released outside the collision area, it doesn't register as screendrag end)

+ done (more on the pattern system, now features line drawing and close to the real one)
    + note (a lesson on event.position, learning that the value is weird, will be correct if it is minus self.position(the position of the event listener))
    + note (question: is our implementation a neat one for detecting ScreenDrag's end?)
        + note (our assumption is that the ScreenDrag end when the last event received is a ScreenTouch event type instead)

t (15/5/20)
+ note (somehow this gives me inspiration that I can't grasp quite yet: https://www.youtube.com/watch?v=PbJaOaXthhk)

o ref(79)
    + done
        + TODO (extend pattern system to potion making system)
            + note (idea: time-sensitive pattern)
        + TODO (timer system so we can set the game pacing)

+ note (okay, something breaks while we are making the "Cauldron")
    + note (the break is literally everything broken!)
        + note (we found a way to see error directly from android: check the option "Debug > Deploy with Remote Debug")
        + note (the error that appears)
            + note ("load_source_code condition err is true returned: err)
            + note (something along the lines of "from signal 'input_event', 'this_method' not found")
                + note (even though there is no problem with the connection, checking via inspector)
    + note (Cauldron refers to ref(101))
    + note (we haven't found what causes it!!)
        + note (what we suspect is the one that is causing this error:  "Another resource is loaded from path 'res://scenes/Point.gd' (possible cyclic resource inclusion).")
            + note (possibly because we are moving resource between folder which seems now a bad idea, we aren't yet sure)

    + note (solution, discard everything :()
        + note (so glad we git)

o ref(105)
    + note (it turns out, the cause is because I reparent the nodes into another node to group it)
        + note (a lesson on that Node.get_children() only return direct children)
        + note (the error seems cascase to another signal apparently?)
        + note (solution: use 'Group' and get all node from group instead reading from children)
            + note (remember that we refer it to string so changing group's name needs caution)

+ note (problem: somehow a value won't pass using signal from these two scene)
    + note (suspect, value can't be passed between instanced scenes?)

t (16/5/20)
o ref(127)
    + note (solution, it's because you forgot the keyword 'return' in one of the passing method.... :/)
        + note (daaaaang it how did I even miss that, I spent like 6 hours!)

o ref(123)
    + note (the error appears yet again, but this time we fixed it by below)
        + note (solution: detach script > move scripts > reattach scripts)
            + note (don't know why it works, but it works!)

+ done (add neat gem system in Cauldron, visual only so far)
    + note (a lesson on function override and call base func by prepending a dot)
    + note (a lesson on making a mathematical formlula on a position series that is different for odd number of elements and even number of elements)
        + note ((x + 2m) * (i + 0.5))

t (17/5/20)
+ done (added a sweet tweening when a gem is added)
    + note (a lesson on being careful when changing method names, you have to expect it to be broken)
    + TODO (our code is messy, clean it up following gdscript styles ref(85))

+ done (separate the node to process each gem process in the cauldron)
    + note (a lesson on duplicate(7) and dictionary.duplicate(true))
        + note (problem: no1, we want to "send" a dictionary to another node using duplicate but it is still the same dictionary. so when we process it in one node, the dict in another node is also affected)
            + note (problem: while fixing this, it was revealed that ref(94) is flawed)
                o ref(94) + null
                + note (solution: new assumption, it ends when the event is InputEventScreenTouch and prev event is InputEventScreenDrag)
            + note (solution: make a Helper function that duplicate dictionary with duplicate(7) for every element)
        + note (this is acutally a messy solution, we should've had separation between data aspect and visual aspect, the thing that mvc preach about, something like that)
            + TODO (design the separation of data)
            + note (problem: this one causes another node would likely to break if interrupted in the process)
                + note (example: the "Reactor" node, the one that receive the result of pattern mixing, will break if the mixing part is done quickly and reactor's process longer than the mixing part)
                + note (temp,solution: make reactor's process instanst for now(only deleting child))
                + TODO (design the action flow and stuff so the process order and interruption is clear)

t (18/5/20)
o ref(105,109,110,120)
    + note (reason: these errors, especially ref(109) and ref(110) are apparently caused by the modification of our code, any code after deploy)
        + note (it seems the remote debug system needs the code to be the same as what is deployed)
            + note (so if you deploy to android, and then change the code a bit and save it, it will break things in the deployed app)
                + note (the most apparent break is that all signal lost their connection, hence ref(110))

t (19/5/20)
+ note (currently designing first before dive further)
    + note (designing includes building prototype assets)
        + TODO (reassemble everything to fit the more robust design)
    + note (need to learn the control node and how it behaves)
        + note (question: do pattern points fit more if we use control node?)

+ note (problem: a little visual bug, if we end pattern before animation finished, the animation will stop)
